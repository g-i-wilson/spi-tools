from pyftdi.gpio import GpioSyncController
import time
import sys


class Device:
	def __init__(self, device, SCLK, MOSI, MISO, CS, direction, defaultState, frequency=1e4):
		self.device = device
		self.frequency = frequency
		self.SCLK = SCLK
		self.MOSI = MOSI
		self.MISO = MISO
		self.CS = CS
		self.direction = direction
		self.defaultState = defaultState
		self.txList = []
		self.readFlag = []
		self.rxList = []
	def transaction(self, byteList, readSize=0): # readSize 0 is simply a write
		self.txList = [self.defaultState | self.CS]
		self.readFlag = []
		self.insertDelay(4)
		self.clockLow()
		self.csLow()
		for aByte in byteList:
			self.writeByte(aByte)
			self.readFlag.append(False)
		for i in range(readSize):
			self.writeByte(0x00)
			self.readFlag.append(True)
		self.csHigh()
		self.clockLow()
		self.insertDelay(4)
		self.transmitSync()
	def insertDelay(self, d):
		for i in range(d):
			self.txList.append(self.txList[-1])
	def clockLow(self):
		self.txList.append( self.txList[-1] & ~self.SCLK )
	def clockLowdataHigh(self):
		self.txList.append( (self.txList[-1] & ~self.SCLK) | self.MOSI )
	def clockLowdataLow(self):
		self.txList.append( (self.txList[-1] & ~self.SCLK) & ~self.MOSI )
	def clockHigh(self):
		self.txList.append( self.txList[-1] | self.SCLK )
	def csLow(self):
		self.txList.append( self.txList[-1] & ~self.CS )
	def csHigh(self):
		self.txList.append( self.txList[-1] | self.CS )
	def writeByte(self, aByte):
		for i in range(8):
			shiftPlaces = 7-i # MSB first "big endian"
			# clock falling edge and data transition
			if ((aByte >> shiftPlaces) & 0x01):
				self.clockLowdataHigh()
			else:
				self.clockLowdataLow()
			# clock rising edge
			self.clockHigh()
	def readByte(self):
		self.writeByte(0x00, read=True)
	def getTxList(self):
		return self.txList
	def transmitSync(self):
		gpio = GpioSyncController()
		gpio.configure(self.device, direction=self.direction, frequency=self.frequency)
		# txBytes = bytearray()
		# for byte in self.txList:
		# 	txBytes.append(byte)
		# print(txBytes)
		rxBytes = gpio.exchange( self.txList );
		# print(rxBytes)
		gpio.close()
		self.rxList = []
		for byte in rxBytes:
			self.rxList.append(byte)
	def getRxList(self):
		return self.rxList
	def getReadFlag(self):
		return self.readFlag
	def read(self, byteList, readSize):
		self.transaction(byteList, readSize)
		rxByteList = readBitBang(self.rxList, self.SCLK, self.MOSI, self.MISO)
		rxByteListOut = []
		for i in range(len(self.readFlag)):
			if self.readFlag[i]:
				rxByteListOut.append(rxByteList[1][i])
		return rxByteListOut
	def write(self, byteList):
		self.transaction(byteList)








def printByte(aByte):
	for aBit in range(8):
		if ((aByte >> (7-aBit)) & 0x01):
			print("1 ", end='')
		else:
			print("_ ", end='')


def printBin(bitBangArray):
	for aByte in bitBangArray:
		printByte(aByte)
		print()

def printHex(bitBangArray):
	for aByte in bitBangArray:
		print(hex(aByte))


def readBitBang(bitBangArray, clockMask, mosiMask, misoMask, debug=0):
	mosiArray = []
	misoArray = []
	bitPlace = 7
	mosiByte = 0x00
	misoByte = 0x00
	for a in range(len(bitBangArray)):
		if debug:
			print("state= ", end='')
			printByte(bitBangArray[a])
		if (not (bitBangArray[a-1] & clockMask) and (bitBangArray[a] & clockMask)): # rising edge
			if debug: print(", rising edge, bitPlace=" + str(bitPlace), end='')
			if (bitBangArray[a] & mosiMask):
				if debug: print(", master=1", end='')
				mosiByte += (1 << bitPlace)
			if (bitBangArray[a] & misoMask): # data=1
				if debug: print(", slave=1", end='')
				misoByte += (1 << bitPlace)
			bitPlace -= 1
		if bitPlace < 0:
			mosiArray.append(mosiByte)
			misoArray.append(misoByte)
			if debug:
				print(", mosiByte="+hex(mosiByte)+", misoByte="+hex(misoByte), end='')
			mosiByte = 0x00
			misoByte = 0x00
			bitPlace = 7
		if debug:
			print()
	return [mosiArray, misoArray]


def displayData(bb): #must all be same length
	tx = readBitBang( bb.getTxList(), bb.SCLK, bb.MOSI, bb.MISO )
	rx = readBitBang( bb.getRxList(), bb.SCLK, bb.MOSI, bb.MISO )
	print("Tx MOSI")
	print(tx[0])
	print("Tx MISO")
	print(tx[1])
	print("Rx MOSI")
	print(rx[0])
	print("Rx MISO")
	print(rx[1])
	print("read Flag:")
	print( bb.getReadFlag() )
	print()








write4wire =	[[0x00,0x00,0x10], #test \
				[0x01,0x38,0x40],\
				[0x01,0x3F,0x00],\
				[0x01,0x40,0xF0],\
				[0x01,0x47,0x00],\
				[0x01,0x4A,0x33],\
				[0x01,0x73,0x60]]


read4wire =		[[0x00,0x00,0x10],\
				[0x81,0x38,0x00],\
				[0x81,0x3F,0x00],\
				[0x81,0x40,0x00],\
				[0x81,0x47,0x00],\
				[0x01,0x4A,0x00],\
				[0x81,0x73,0x00]]

minWrite4wire =	[[0x00,0x00,0x10],\
				[0x01,0x4A,0x33]]

readAll4wire = 	[[0x00,0x00,0x10],\
				[0x01,0x4A,0x33],\
				[0x80,0x02,0x00],\
				[0x80,0x03,0x00],\
				[0x80,0x04,0x00],\
				[0x80,0x05,0x00],\
				[0x80,0x06,0x00], # test \
				[0x80,0x0C,0x00],\
				[0x80,0x0D,0x00],\
				[0x81,0x00,0x00],\
				[0x81,0x01,0x00],\
				[0x81,0x03,0x00],\
				[0x81,0x04,0x00],\
				[0x81,0x05,0x00],\
				[0x81,0x06,0x00],\
				[0x81,0x07,0x00],\
				[0x81,0x08,0x00],\
				[0x81,0x09,0x00],\
				[0x81,0x0B,0x00],\
				[0x81,0x0C,0x00],\
				[0x81,0x0D,0x00],\
				[0x81,0x0E,0x00],\
				[0x81,0x0F,0x00],\
				[0x81,0x10,0x00],\
				[0x81,0x11,0x00],\
				[0x81,0x13,0x00],\
				[0x81,0x14,0x00],\
				[0x81,0x15,0x00],\
				[0x81,0x16,0x00],\
				[0x81,0x17,0x00],\
				[0x81,0x18,0x00],\
				[0x81,0x19,0x00],\
				[0x81,0x1B,0x00],\
				[0x81,0x1C,0x00],\
				[0x81,0x1D,0x00],\
				[0x81,0x1E,0x00],\
				[0x81,0x1F,0x00],\
				[0x81,0x20,0x00],\
				[0x81,0x21,0x00],\
				[0x81,0x23,0x00],\
				[0x81,0x24,0x00],\
				[0x81,0x25,0x00],\
				[0x81,0x26,0x00],\
				[0x81,0x27,0x00],\
				[0x81,0x28,0x00],\
				[0x81,0x29,0x00],\
				[0x81,0x2B,0x00],\
				[0x81,0x2C,0x00],\
				[0x81,0x2D,0x00],\
				[0x81,0x2E,0x00],\
				[0x81,0x2F,0x00],\
				[0x81,0x30,0x00],\
				[0x81,0x31,0x00],\
				[0x81,0x33,0x00],\
				[0x81,0x34,0x00],\
				[0x81,0x35,0x00],\
				[0x81,0x36,0x00],\
				[0x81,0x37,0x00],\
				[0x81,0x38,0x00],\
				[0x81,0x39,0x00],\
				[0x81,0x3A,0x00],\
				[0x81,0x3B,0x00],\
				[0x81,0x3C,0x00],\
				[0x81,0x3D,0x00],\
				[0x81,0x3E,0x00],\
				[0x81,0x3F,0x00],\
				[0x81,0x40,0x00],\
				[0x81,0x41,0x00],\
				[0x81,0x42,0x00],\
				[0x81,0x43,0x00],\
				[0x81,0x44,0x00],\
				[0x81,0x45,0x00],\
				[0x81,0x46,0x00],\
				[0x81,0x47,0x00],\
				[0x81,0x48,0x00],\
				[0x81,0x49,0x00],\
				[0x81,0x4A,0x00],\
				[0x81,0x4B,0x00],\
				[0x81,0x4C,0x00],\
				[0x81,0x4D,0x00],\
				[0x81,0x4E,0x00],\
				[0x81,0x4F,0x00],\
				[0x81,0x50,0x00],\
				[0x81,0x51,0x00],\
				[0x81,0x52,0x00],\
				[0x81,0x53,0x00],\
				[0x81,0x54,0x00],\
				[0x81,0x55,0x00],\
				[0x81,0x56,0x00],\
				[0x81,0x57,0x00],\
				[0x81,0x58,0x00],\
				[0x81,0x59,0x00],\
				[0x81,0x5A,0x00],\
				[0x81,0x5B,0x00],\
				[0x81,0x5C,0x00],\
				[0x81,0x5D,0x00],\
				[0x81,0x5E,0x00],\
				[0x81,0x5F,0x00],\
				[0x81,0x60,0x00],\
				[0x81,0x61,0x00],\
				[0x81,0x62,0x00],\
				[0x81,0x63,0x00],\
				[0x81,0x64,0x00],\
				[0x81,0x65,0x00],\
				[0x81,0x66,0x00],\
				[0x81,0x67,0x00],\
				[0x81,0x68,0x00],\
				[0x81,0x69,0x00],\
				[0x81,0x6A,0x00],\
				[0x81,0x6B,0x00],\
				[0x81,0x6C,0x00],\
				[0x81,0x6D,0x00],\
				[0x81,0x6E,0x00],\
				[0x81,0x71,0x00],\
				[0x81,0x72,0x00],\
				[0x81,0x73,0x00],\
				[0x81,0x74,0x00],\
				[0x81,0x7C,0x00],\
				[0x81,0x7D,0x00],\
				[0x81,0x82,0x00],\
				[0x81,0x83,0x00],\
				[0x81,0x84,0x00],\
				[0x81,0x85,0x00],\
				[0x81,0x88,0x00],\
				[0x9F,0xFD,0x00],\
				[0x9F,0xFE,0x00],\
				[0x9F,0xFF,0x00]]



write3wire =	[[0x00,0x00,0x80],\
				[0x01,0x38,0x40],\
				[0x01,0x3F,0x00],\
				[0x01,0x40,0xF0],\
				[0x01,0x47,0x00],\
				[0x01,0x73,0x60]]


read3wire =		[[0x00,0x00,0x80],\
				[0x81,0x38,0x00],\
				[0x81,0x3F,0x00],\
				[0x81,0x40,0x00],\
				[0x81,0x47,0x00],\
				[0x81,0x73,0x00]]



sckMask = 0x10
sdioMask = 0x20
sdoMask = 0x40
csMask = 0x80

spi = Device('ftdi:///2', sckMask, sdioMask, sdoMask, csMask, 0xBB, 0x88, 1e4)



for someBytes in readAll4wire:
	if someBytes[2] == 0x00:
		print("reading from "+hex(someBytes[0])+" "+hex(someBytes[1])+":")
		print( spi.read([someBytes[0],someBytes[1]], 1) )
	else:
		print("writing "+hex(someBytes[2])+" to "+hex(someBytes[0])+" "+hex(someBytes[1]))
		spi.write(someBytes)
	spi.transmitSync()
	# displayData( spi )
